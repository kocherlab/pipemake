rule all:
    input:
        expand(
            os.path.join(
                config["paths"]["workflow_prefix"],
                config["paths"]["sra_processed"],
                "{SRA_ID}.sra_processed",
            ),
            SRA_ID=config["SRA_IDs"],
        ),


checkpoint fastq_sra_download:
    output:
        directory(
            os.path.join(
                config["paths"]["workflow_prefix"],
                config["paths"]["sra_processing"],
                "{SRA_ID}_DIR",
            )
        ),
    threads: 1
    shell:
        "fastq-dump {wildcards.SRA_ID} -O {output} --split-3 --skip-technical --gzip"


rule fastq_sra_process_reads:
    input:
        os.path.join(
            config["paths"]["workflow_prefix"],
            config["paths"]["sra_processing"],
            "{SRA_ID}_DIR",
            "{SRA_ID}_{read}.fastq.gz",
        ),
    output:
        os.path.join(
            config["paths"]["workflow_prefix"],
            config["paths"]["sra_processed"],
            "{SRA_ID}_R{read}.fq.gz",
        ),
    threads: 1
    shell:
        """
        mv {input} {output}
        touch {input}
        """


def aggregate_sra_fastq(wildcards):
    checkpoint_output = checkpoints.fastq_sra_download.get(**wildcards).output[0]
    fastq_wildcards = glob_wildcards(
        os.path.join(
            checkpoint_output,
            f"{wildcards.SRA_ID}_{{reads}}.fastq.gz",
        )
    )
    return expand(
        os.path.join(
            config["paths"]["workflow_prefix"],
            config["paths"]["sra_processed"],
            f"{wildcards.SRA_ID}_R{{read}}.fq.gz",
        ),
        read=fastq_wildcards.reads,
    )


rule fastq_sra_check_processed:
    input:
        aggregate_sra_fastq,
    output:
        temp(
            os.path.join(
                config["paths"]["workflow_prefix"],
                config["paths"]["sra_processed"],
                "{SRA_ID}.sra_processed",
            )
        ),
    params:
        sra_dir=os.path.join(
            config["paths"]["workflow_prefix"],
            config["paths"]["sra_processing"],
            "{SRA_ID}_DIR",
        ),
    threads: 1
    run:
        import shutil

        if len(input) == 0:
            raise ValueError("No fastq files were generated by fastq-dump")
        else:
            shell("touch {output}")
            shutil.rmtree(params.sra_dir)
